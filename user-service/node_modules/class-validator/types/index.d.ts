import { ValidationError } from 'class-validator/types/validation/ValidationErrortion/ValidationError';
import { Validclass-validator/types/validation/ValidatorOptionsidator/types/validation/ValidatorOpticlass-validator/types/validation-schema/ValidationSchemaom 'class-validatoclass-validator/types/containeridation-schema/Valclass-validator/types/decorator/decorators * from 'class-valclass-validator/types/decorator/ValidationOptionsrt * from 'class-vclass-validator/types/validation/ValidatorConstraintInterfaceort * from 'class-class-validator/types/validation/ValidationErrorlidationOptions';
class-validator/types/validation/ValidatorOptionsr/types/validationclass-validator/types/validation/ValidationArgumentsexport * from 'claclass-validator/types/validation/ValidationTypesn/ValidationError'class-validator/types/validation/Validator-validator/types/vclass-validator/types/validation-schema/ValidationSchema* from 'class-valiclass-validator/types/register-decoratoron/ValidationArgumclass-validator/types/metadata/MetadataStorages-validator/types/validation/ValidationTypes';
export * from 'class-validator/types/validation/Validator';
export * from 'class-validator/types/validation-schema/ValidationSchema';
export * from 'class-validator/types/register-decorator';
export * from 'class-validator/types/metadata/MetadataStorage';
/**
 * Validates given object.
 */
export declare function validate(object: object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;
/**
 * Validates given object by a given validation schema.
 */
export declare function validate(schemaName: string, object: object, validatorOptions?: ValidatorOptions): Promise<ValidationError[]>;
/**
 * Validates given object and reject on error.
 */
export declare function validateOrReject(object: object, validatorOptions?: ValidatorOptions): Promise<void>;
/**
 * Validates given object by a given validation schema and reject on error.
 */
export declare function validateOrReject(schemaName: string, object: object, validatorOptions?: ValidatorOptions): Promise<void>;
/**
 * Performs sync validation of the given object.
 * Note that this method completely ignores async validations.
 * If you want to properly perform validation you need to call validate method instead.
 */
export declare function validateSync(object: object, validatorOptions?: ValidatorOptions): ValidationError[];
/**
 * Validates given object by a given validation schema.
 * Note that this method completely ignores async validations.
 * If you want to properly perform validation you need to call validate method instead.
 */
export declare function validateSync(schemaName: string, object: object, validatorOptions?: ValidatorOptions): ValidationError[];
/**
 * Registers a new validation schema.
 */
export declare function registerSchema(schema: ValidationSchema): void;
